/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.takeaway.challenge.controller;

import io.swagger.model.Employee;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-12-03T17:19:31.465Z")

@Api(value = "employee", description = "the employee API")
@RequestMapping(value = "/v1")
public interface EmployeeApi {

    @ApiOperation(value = "Add a new employee to the store", nickname = "addEmployee", notes = "", tags={ "employees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/employees",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addEmployee(@ApiParam(value = "Employee object that needs to be added to the system" ,required=true )  @Valid @RequestBody Employee body);


    @ApiOperation(value = "Deletes an Employee", nickname = "deleteEmployee", notes = "", tags={ "employees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid UUID supplied"),
        @ApiResponse(code = 404, message = "Employee not found") })
    @RequestMapping(value = "/employees/{employeeUuid}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEmployee(@ApiParam(value = "Employee uuid to delete",required=true) @PathVariable("employeeUuid") String employeeUuid,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Find employee by UUID", nickname = "getEmployeeByUuid", notes = "Returns a single employee", response = Employee.class, tags={ "employees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Employee.class),
        @ApiResponse(code = 400, message = "Invalid UUID supplied"),
        @ApiResponse(code = 404, message = "Employee not found") })
    @RequestMapping(value = "/employees/{employeeUuid}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Employee> getEmployeeByUuid(@ApiParam(value = "UUID of employee to return",required=true) @PathVariable("employeeUuid") String employeeUuid);


    @ApiOperation(value = "Update an existing employee", nickname = "updateEmployee", notes = "", tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid UUID supplied"),
        @ApiResponse(code = 404, message = "Employee not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/employees",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateEmployee(@ApiParam(value = "Employee object that needs update in system" ,required=true )  @Valid @RequestBody Employee body);

}
